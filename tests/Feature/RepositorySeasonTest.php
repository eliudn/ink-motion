<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Artisan;
use Src\Application\MediaRepositories\Infrastructure\Repositories\Eloquent\MediaRepository;
use Src\Application\MediaRepositorySeasons\Application\Get\SeasonShowUseCase;
use Src\Application\MediaRepositorySeasons\Domain\Contracts\SeasonRepositoryContract;
use Src\Application\MediaRepositorySeasons\Infrastructure\Repositories\Eloquent\MediaRepositorySeason;
use Src\Shared\Infrastructure\Helper\UrlApi;
use Tests\TestCase;

class RepositorySeasonTest extends TestCase
{
    use RefreshDatabase;
    use UrlApi;
    protected $userId;
    protected $jwt;
    protected $repositoryId;
    private $seasonId;

 /*   protected function setUp(): void
    {

        parent::setUp(); // TODO: Change the autogenerated stub


        $loguin= $this->loginUser();

        $this->userId = $loguin->original['message']['id'];
        $this->jwt = $loguin->original['message']['jwt'];
        $repository = MediaRepository::factory()->create(['user_id'=>$this->userId]);
        $this->repositoryId = $repository->id;
    }*/


    private function loginUser(): void
    {
        Artisan::call('migrate:fresh --seed');


       $loguin= $this->post($this->login(),
            [
                "nickname_or_email"=>"default1",
                "password"=>"defaul"
            ],
            ['authorization'=>env('API_KEY')]
        );

        $this->userId = $loguin->original['message']['id'];
        $this->jwt = $loguin->original['message']['jwt'];
        $repository = MediaRepository::factory()->create(['user_id'=>$this->userId]);
        $this->repositoryId = $repository->id;

    }

    private function newSeason(): \Illuminate\Testing\TestResponse
    {
        return $this->post($this->season($this->userId,$this->repositoryId),
            ["order"=>1],
            [
                'authorization'=>env('API_KEY'),
                'authentication'=>$this->jwt
            ]
        );
    }
    /**
     * A basic feature test example.
     */
    public function testNewSeason(): void
    {

         $this->loginUser();

        $season = $this->post($this->season($this->userId,$this->repositoryId),
            ["order"=>1],
            [
                'authorization'=>env('API_KEY'),
                'authentication'=>$this->jwt
            ]
        );


         $season->assertStatus(200)
        ->assertJsonStructure([
            'status',
            'error',
            'message'=>[
                'id',
                'season',
                'status'
            ]
        ]);
    }

    public function testNewSeasonPrevStatusIncorrect():void
    {
        $this->loginUser();


        $this->post($this->season($this->userId,$this->repositoryId),
            ["order"=>1],
            [
                'authorization'=>env('API_KEY'),
                'authentication'=>$this->jwt
            ]
        );
        $season = $this->post($this->season($this->userId,$this->repositoryId),
            ["order"=>1],
            [
                'authorization'=>env('API_KEY'),
                'authentication'=>$this->jwt
            ]
        );

        $season->assertStatus(400)
            ->assertJsonStructure([
                'status',
                'error',
                'class',
                'message'
            ]);
    }

    public function testUpdateStatus():void
    {
        $this->loginUser();
        $this->seasonId =  $this->newSeason()->original['message']['id'];

        $this->put(
            $this->seasonByIdUpdateStatus(),
            [
                "status"=>"finalizado"
            ],
            [
                'authorization'=>env('API_KEY'),
                'authentication'=>$this->jwt
            ]
        )
            ->assertStatus(200)
            ->assertJsonStructure([
                'status',
                'error',
                'message'=>[
                    'id',
                    'season',
                    'status'
                ]
            ]);
    }

    public function testNewSeasonPrevStatusCorrect():void
    {
        $this->loginUser();


        $this->seasonId=  $this->post($this->season($this->userId,$this->repositoryId),
            ["order"=>1],
            [
                'authorization'=>env('API_KEY'),
                'authentication'=>$this->jwt
            ]
        )->original['message']['id'];

        $this->put(
            $this->seasonByIdUpdateStatus(),
            [
                "status"=>"finalizado"
            ],
            [
                'authorization'=>env('API_KEY'),
                'authentication'=>$this->jwt
            ]
        );

        $season = $this->post($this->season($this->userId,$this->repositoryId),
            ["order"=>1],
            [
                'authorization'=>env('API_KEY'),
                'authentication'=>$this->jwt
            ]
        );

        $season->assertStatus(200)
            ->assertJsonStructure([
                'status',
                'error',
                'message'=>[
                    'id',
                    'season',
                    'status'
                ]
            ]);
    }

}
